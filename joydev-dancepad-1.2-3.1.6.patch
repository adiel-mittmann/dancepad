--- linux-3.1.6/drivers/input/joydev.c.bak	2011-12-21 19:00:46.000000000 -0200
+++ linux-3.1.6/drivers/input/joydev.c	2012-01-01 20:02:01.118331207 -0200
@@ -38,6 +38,9 @@
 #define JOYDEV_MINORS		16
 #define JOYDEV_BUFFER_SIZE	64
 
+#define DANCEPAD_VENDOR  0x0810
+#define DANCEPAD_PRODUCT 0x0001
+
 struct joydev {
 	int open;
 	int minor;
@@ -58,6 +61,9 @@
 	__u8 absmap[ABS_CNT];
 	__u8 abspam[ABS_CNT];
 	__s16 abs[ABS_CNT];
+	bool dance_pad;
+  	unsigned x_axis_status;
+  	unsigned y_axis_status;
 };
 
 struct joydev_client {
@@ -118,43 +124,150 @@
 	kill_fasync(&client->fasync, SIGIO, POLL_IN);
 }
 
-static void joydev_event(struct input_handle *handle,
-			 unsigned int type, unsigned int code, int value)
+static void joydev_send_event(struct js_event *event, struct joydev *joydev)
 {
-	struct joydev *joydev = handle->private;
 	struct joydev_client *client;
-	struct js_event event;
-
-	switch (type) {
-
-	case EV_KEY:
-		if (code < BTN_MISC || value == 2)
-			return;
-		event.type = JS_EVENT_BUTTON;
-		event.number = joydev->keymap[code - BTN_MISC];
-		event.value = value;
-		break;
-
-	case EV_ABS:
-		event.type = JS_EVENT_AXIS;
-		event.number = joydev->absmap[code];
-		event.value = joydev_correct(value,
-					&joydev->corr[event.number]);
-		if (event.value == joydev->abs[event.number])
-			return;
-		joydev->abs[event.number] = event.value;
-		break;
-
-	default:
-		return;
-	}
-
-	event.time = jiffies_to_msecs(jiffies);
+	event->time = jiffies_to_msecs(jiffies);
 
 	rcu_read_lock();
 	list_for_each_entry_rcu(client, &joydev->client_list, node)
-		joydev_pass_event(client, &event);
+		joydev_pass_event(client, event);
 	rcu_read_unlock();
+}
+
+static void joydev_event(struct input_handle *handle,
+			 unsigned int type, unsigned int code, int value)
+{
+	struct joydev *joydev = handle->private;
+	struct js_event event;
+
+#       define JOYDEV_LEFT 12 
+#       define JOYDEV_RIGHT 13 
+#       define JOYDEV_UP 14 
+#       define JOYDEV_DOWN 15 
+#       define X_AXIS 0
+#       define Y_AXIS 1
+#       define X_AXIS_LEFT 1
+#       define X_AXIS_RIGHT 2
+#       define Y_AXIS_UP 1
+#       define Y_AXIS_DOWN 2
+
+        if (joydev->dance_pad)
+        {
+
+                unsigned x_axis_new_status = joydev->x_axis_status;
+                unsigned y_axis_new_status = joydev->y_axis_status;
+
+                switch (type) {
+
+                case EV_KEY:
+                        if (code < BTN_MISC || value == 2)
+                                return;
+                        event.type = JS_EVENT_BUTTON;
+                        event.number = joydev->keymap[code - BTN_MISC];
+                        event.value = value;
+
+                        joydev_send_event(&event, joydev);
+
+                        break;
+
+                case EV_ABS:
+                        if (code == X_AXIS)
+                        {
+                                if (value == 0)
+                                {
+                                        x_axis_new_status |= X_AXIS_LEFT;
+                                        x_axis_new_status &= ~X_AXIS_RIGHT;
+                                }
+                                if (value == 255)
+                                {
+                                        x_axis_new_status |= X_AXIS_RIGHT;
+                                        x_axis_new_status &= ~X_AXIS_LEFT;
+                                }
+                                if (value == 128)
+                                        x_axis_new_status |= X_AXIS_LEFT | X_AXIS_RIGHT;
+                                if (value == 127)
+                                        x_axis_new_status = 0;
+                        }
+                        if (code == Y_AXIS)
+                        {
+                                if (value == 0)
+                                {
+                                        y_axis_new_status |= Y_AXIS_UP;
+                                        y_axis_new_status &= ~Y_AXIS_DOWN;
+                                }
+                                if (value == 255)
+                                {
+                                        y_axis_new_status |= Y_AXIS_DOWN;
+                                        y_axis_new_status &= ~Y_AXIS_UP;
+                                }
+                                if (value == 128)
+                                        y_axis_new_status |= Y_AXIS_UP | Y_AXIS_DOWN;
+                                if (value == 127)
+                                        y_axis_new_status = 0;
+                        }
+
+                        event.type = JS_EVENT_BUTTON;
+                        if ((x_axis_new_status ^ joydev->x_axis_status) & X_AXIS_LEFT)
+                        {
+                                event.number = JOYDEV_LEFT;
+                                event.value = (x_axis_new_status & X_AXIS_LEFT) > 0 ? 1 : 0;
+                                joydev_send_event(&event, joydev);
+                        }
+                        if ((x_axis_new_status ^ joydev->x_axis_status) & X_AXIS_RIGHT)
+                        {
+                                event.number = JOYDEV_RIGHT;
+                                event.value = (x_axis_new_status & X_AXIS_RIGHT) > 0 ? 1 : 0;
+                                joydev_send_event(&event, joydev);
+                        }
+                        if ((y_axis_new_status ^ joydev->y_axis_status) & Y_AXIS_UP)
+                        {
+                                event.number = JOYDEV_UP;
+                                event.value = (y_axis_new_status & Y_AXIS_UP) > 0 ? 1 : 0;
+                                joydev_send_event(&event, joydev);
+                        }
+                        if ((y_axis_new_status ^ joydev->y_axis_status) & Y_AXIS_DOWN)
+                        {
+                                event.number = JOYDEV_DOWN;
+                                event.value = (y_axis_new_status & Y_AXIS_DOWN) > 0 ? 1 : 0;
+                                joydev_send_event(&event, joydev);
+                        }
+
+                        joydev->x_axis_status = x_axis_new_status;
+                        joydev->y_axis_status = y_axis_new_status;
+
+                        break;
+                default:
+                        return;
+                }
+        }
+        else
+        {
+                switch (type) {
+
+                case EV_KEY:
+                        if (code < BTN_MISC || value == 2)
+                                return;
+                        event.type = JS_EVENT_BUTTON;
+                        event.number = joydev->keymap[code - BTN_MISC];
+                        event.value = value;
+                        break;
+
+                case EV_ABS:
+                        event.type = JS_EVENT_AXIS;
+                        event.number = joydev->absmap[code];
+                        event.value = joydev_correct(value,
+                                                     &joydev->corr[event.number]);
+                        if (event.value == joydev->abs[event.number])
+                                return;
+                        joydev->abs[event.number] = event.value;
+                        break;
+
+                default:
+                        return;
+                }
+                joydev_send_event(&event, joydev);
+        }
 
 	wake_up_interruptible(&joydev->wait);
 }
@@ -876,6 +989,19 @@
 		}
 	}
 
+        if (dev->id.vendor == DANCEPAD_VENDOR && dev->id.product == DANCEPAD_PRODUCT)
+        {
+                joydev->dance_pad = true;
+                joydev->x_axis_status = 0;
+                joydev->y_axis_status = 0;
+                joydev->nkey += 4;
+                printk("Dancepad detected: activating workaround.\n");
+        }
+        else
+        {
+                joydev->dance_pad = false;
+        }
+
 	joydev->dev.devt = MKDEV(INPUT_MAJOR, JOYDEV_MINOR_BASE + minor);
 	joydev->dev.class = &input_class;
 	joydev->dev.parent = &dev->dev;
